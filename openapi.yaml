openapi: 3.1.0
info:
  title: AI Planner API
  version: 1.0.0
  description: |
    API for managing PRDs, implementation plans, codebase chunks, and decision logs for AI-driven planning workflows. 
    Designed for seamless integration with Custom GPTs and AI coding agents. 
    All endpoints are tool-ready and support structured, tagged, and embedded content.
servers:
  - url: https://aiplanner-production.up.railway.app
paths:
  /add_prd_section:
    post:
      operationId: add_prd_section
      summary: Add a new PRD section
      description: |
        Creates a new Product Requirement Document (PRD) section for a project. 
        Tags must be pre-generated by GPT and passed in. Embedding is computed from title + content.
        Example use: Add a new feature or requirement to the PRD.
      tags: [prd]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PRDSectionCreate'
            example:
              project_id: "123e4567-e89b-12d3-a456-426614174000"
              section: "Features"
              subsection: "Sign-Up Flow"
              title: "Sign-Up Flow Requirements"
              content: "The sign-up screen must support email, password, and SSO. It must be fully mobile responsive."
              tags: ["signup", "auth", "mobile", "frontend"]
              order_index: 1.0
      responses:
        '201':
          description: PRD section created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
              example:
                id: "456e4567-e89b-12d3-a456-426614174111"
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /update_prd_section:
    put:
      operationId: update_prd_section
      summary: Update an existing PRD section
      description: |
        Updates the content, tags, or order of an existing PRD section. 
        Tags must be regenerated and passed in by GPT. Embedding is recomputed if content or title changes.
      tags: [prd]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PRDSectionUpdate'
            example:
              section_id: "456e4567-e89b-12d3-a456-426614174111"
              title: "Sign-Up Flow Requirements (Updated)"
              content: "Now requires mobile-first design."
              tags: ["signup", "auth", "mobile", "frontend"]
              order_index: 1.0
      responses:
        '200':
          description: PRD section updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  updated:
                    type: boolean
              example:
                id: "456e4567-e89b-12d3-a456-426614174111"
                updated: true
        '404':
          description: PRD section not found
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /query_prd:
    post:
      operationId: query_prd
      summary: Semantic search for PRD sections
      description: |
        Performs a semantic (vector) search for PRD sections using a natural language query and optional tag filtering. 
        Returns the most relevant PRD sections for the given project.
      tags: [prd]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PRDSectionQuery'
            example:
              query: "How does the sign-up flow support mobile users?"
              project_id: "123e4567-e89b-12d3-a456-426614174000"
              tags: ["signup"]
              top_k: 5
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  matches:
                    type: array
                    items:
                      $ref: '#/components/schemas/PRDSectionMatch'
              example:
                matches:
                  - id: "456e4567-e89b-12d3-a456-426614174111"
                    section: "Features"
                    subsection: "Sign-Up Flow"
                    title: "Sign-Up Flow Requirements"
                    content: "The sign-up screen must support email, password, and SSO. It must be fully mobile responsive."
                    tags: ["signup", "auth", "mobile", "frontend"]
                    order_index: 1.0
                    distance: 0.01
        '400':
          description: Query failed
        '500':
          description: Internal server error
  /delete_prd_section:
    post:
      operationId: delete_prd_section
      summary: Soft delete a PRD section
      tags: [prd]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                section_id:
                  type: string
      responses:
        '200':
          description: PRD section deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  deleted:
                    type: boolean
  /retag_section:
    post:
      operationId: retag_section
      summary: Retag a PRD section (stub)
      tags: [prd]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                section_id:
                  type: string
      responses:
        '200':
          description: Retag result
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  retagged:
                    type: boolean
                  note:
                    type: string
  /add_plan_step:
    post:
      operationId: add_plan_step
      summary: Add a new plan step
      description: |
        Adds a new implementation plan step under a specific section/subsection for a project.
        Tags must be pre-generated by GPT and passed in. Embedding is computed from title + description.
        Example use: Add a new coding or implementation task to the plan.
      tags: [plan]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanStepCreate'
            example:
              project_id: "123e4567-e89b-12d3-a456-426614174000"
              section: "Features"
              subsection: "Sign-Up Flow"
              title: "Implement email + password input"
              description: "Create a form with email and password fields using Tailwind and validate input."
              tags: ["frontend", "signup", "form", "validation"]
              order_index: 1.0
      responses:
        '201':
          description: Plan step created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
              example:
                id: "789e4567-e89b-12d3-a456-426614174222"
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /update_plan_step:
    put:
      operationId: update_plan_step
      summary: Update an existing plan step
      description: |
        Updates the title, description, tags, or order_index of an existing plan step.
        Tags must be regenerated and passed in by GPT. Embedding is recomputed if title or description changes.
      tags: [plan]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanStepUpdate'
            example:
              step_id: "789e4567-e89b-12d3-a456-426614174222"
              title: "Implement email + password input (Updated)"
              description: "Now includes mobile validation."
              tags: ["frontend", "signup", "form", "validation", "mobile"]
              order_index: 1.0
      responses:
        '200':
          description: Plan step updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  updated:
                    type: boolean
              example:
                id: "789e4567-e89b-12d3-a456-426614174222"
                updated: true
        '404':
          description: Plan step not found
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /delete_plan_step:
    post:
      operationId: delete_plan_step
      summary: Soft delete a plan step
      description: |
        Soft deletes a plan step (sets is_deleted = true) so it is hidden from retrieval but not removed from the database.
      tags: [plan]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                step_id:
                  type: string
            example:
              step_id: "789e4567-e89b-12d3-a456-426614174222"
      responses:
        '200':
          description: Plan step deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  deleted:
                    type: boolean
              example:
                id: "789e4567-e89b-12d3-a456-426614174222"
                deleted: true
        '404':
          description: Plan step not found
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /list_plan_steps/{project_id}:
    get:
      operationId: list_plan_steps
      summary: List all plan steps for a project
      description: |
        Returns all plan steps for a given project, grouped and sorted by section and order_index.
        Useful for GPT to avoid duplicates or calculate the next step position.
      tags: [plan]
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of plan steps
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanStepListItem'
              example:
                - id: "789e4567-e89b-12d3-a456-426614174222"
                  section: "Features"
                  subsection: "Sign-Up Flow"
                  title: "Implement email + password input"
                  description: "Create a form with email and password fields using Tailwind and validate input."
                  tags: ["frontend", "signup", "form", "validation"]
                  order_index: 1.0
        '404':
          description: Project not found
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /export_plan/{project_id}:
    get:
      operationId: export_plan
      summary: Export plan steps for a project
      description: |
        Exports the full implementation plan for a project as Markdown or JSON, grouped by section/subsection and sorted by order_index.
        Used by export tools, Cursor, and team sharing.
      tags: [plan, export]
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: false
          schema:
            type: string
            enum: [markdown, json]
      responses:
        '200':
          description: Exported plan (Markdown or JSON)
          content:
            text/markdown:
              schema:
                type: string
              example: |
                ## [Section] Features
                ### [Subsection] Sign-Up Flow
                #### Title: Implement email + password input
                Create a form with email and password fields using Tailwind and validate input.
                Tags: frontend, signup, form, validation
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanStepListItem'
              example:
                - section: "Features"
                  subsection: "Sign-Up Flow"
                  title: "Implement email + password input"
                  description: "Create a form with email and password fields using Tailwind and validate input."
                  tags: ["frontend", "signup", "form", "validation"]
                  order_index: 1.0
        '404':
          description: Project not found
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /generate_plan:
    post:
      operationId: generate_plan
      summary: Bulk create plan steps
      description: |
        Generates and stores multiple plan steps for a given section or subsection. 
        Each step must include title, description, tags, and order_index. 
        Used by GPT to create a full plan section in one call.
      tags: [plan]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanStepBulkCreate'
            example:
              project_id: "123e4567-e89b-12d3-a456-426614174000"
              section: "Features"
              subsection: "Sign-Up Flow"
              steps:
                - title: "Implement email + password input"
                  description: "Create a form with email and password fields using Tailwind and validate input."
                  tags: ["frontend", "signup", "form", "validation"]
                  order_index: 1.0
                - title: "Add OAuth login options"
                  description: "Integrate Google and GitHub login using Auth0."
                  tags: ["auth", "oauth", "backend", "signup"]
                  order_index: 2.0
      responses:
        '201':
          description: Plan steps created
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_ids:
                    type: array
                    items:
                      type: string
              example:
                created_ids: ["789e4567-e89b-12d3-a456-426614174222", "890e4567-e89b-12d3-a456-426614174333"]
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /query_plan:
    post:
      operationId: query_plan
      summary: Semantic search for plan steps
      description: |
        Performs a semantic (vector) search for plan steps using a natural language query and optional tag filtering. 
        Returns the most relevant plan steps for the given project.
      tags: [plan]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanStepQuery'
            example:
              query: "How is the login form validated?"
              project_id: "123e4567-e89b-12d3-a456-426614174000"
              tags: ["login", "validation"]
              top_k: 5
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  matches:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlanStepMatch'
              example:
                matches:
                  - id: "789e4567-e89b-12d3-a456-426614174222"
                    section: "Features"
                    subsection: "Sign-Up Flow"
                    title: "Implement email + password input"
                    description: "Create a form with email and password fields using Tailwind and validate input."
                    tags: ["frontend", "signup", "form", "validation"]
                    order_index: 1.0
                    distance: 0.01
        '400':
          description: Query failed
        '500':
          description: Internal server error
  /query_codebase:
    post:
      operationId: query_codebase
      summary: Semantic search for code chunks
      description: |
        Performs a semantic (vector) search for codebase chunks using a natural language question and optional tag filtering.
        Returns the most relevant code chunks for the given project, including file path, line range, and content.
      tags: [codebase]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodebaseQuery'
            example:
              question: "Where is the signup form validated?"
              project_id: "123e4567-e89b-12d3-a456-426614174000"
              tags: ["signup", "validation"]
              top_k: 5
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  matches:
                    type: array
                    items:
                      $ref: '#/components/schemas/CodeChunkMatch'
              example:
                matches:
                  - id: "abc123"
                    file_path: "src/auth/login.py"
                    line_start: 1
                    line_end: 20
                    content: "def login():\n    pass  # TODO: implement login logic\n"
                    tags: ["auth", "login", "backend"]
                    distance: 0.02
        '400':
          description: Query failed
        '500':
          description: Internal server error
  /log_decision:
    post:
      operationId: log_decision
      summary: Log a decision
      description: |
        Logs a planning or implementation decision with rationale, tags, and linked sections.
        Enables downstream impact tracing and change tracking.
      tags: [decisions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecisionLogCreate'
            example:
              project_id: "123e4567-e89b-12d3-a456-426614174000"
              section: "Features"
              subsection: "Sign-Up Flow"
              summary: "Require phone-based 2FA for all new sign-ups"
              rationale: "Security concerns raised during beta testing"
              change_type: "content update"
              tags: ["signup", "2fa", "security"]
              linked_sections: ["abc123"]
      responses:
        '201':
          description: Decision logged
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
              example:
                id: "dec123"
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /trace_impact:
    post:
      operationId: trace_impact
      summary: Analyze decision impact (stub)
      description: |
        Analyzes a decision and returns a list of potentially affected PRD or plan sections.
        (Stub: actual impact analysis logic to be implemented.)
      tags: [decisions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TraceImpactInput'
            example:
              project_id: "123e4567-e89b-12d3-a456-426614174000"
              decision_id: "dec123"
      responses:
        '200':
          description: Impact analysis result
          content:
            application/json:
              schema:
                type: object
                properties:
                  affected_sections:
                    type: array
                    items:
                      type: string
              example:
                affected_sections: ["abc123", "xyz456"]
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /suggest_updates:
    post:
      operationId: suggest_updates
      summary: Suggest content updates (stub)
      description: |
        Suggests content updates for given section IDs using GPT. (Stub: actual suggestion logic to be implemented.)
      tags: [decisions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuggestUpdatesInput'
            example:
              section_ids: ["abc123", "xyz456"]
      responses:
        '200':
          description: Suggested updates
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggested_updates:
                    type: array
                    items:
                      type: string
              example:
                suggested_updates: ["Update login to support 2FA.", "Add mobile validation to signup."]
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /export_prd/{project_id}:
    get:
      operationId: export_prd
      summary: Export PRD sections for a project
      description: |
        Exports all PRD sections for a project as Markdown or JSON, grouped and sorted by section/subsection and order_index.
        Used for documentation, Cursor, and team sharing.
      tags: [prd, export]
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: false
          schema:
            type: string
            enum: [markdown, json]
      responses:
        '200':
          description: Exported PRD (Markdown or JSON)
          content:
            text/markdown:
              schema:
                type: string
              example: |
                ## [Section] Features
                ### [Subsection] Sign-Up Flow
                #### Title: Sign-Up Flow Requirements
                The sign-up screen must support email, password, and SSO. It must be fully mobile responsive.
                Tags: signup, auth, mobile, frontend
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PRDSectionListItem'
              example:
                - section: "Features"
                  subsection: "Sign-Up Flow"
                  title: "Sign-Up Flow Requirements"
                  content: "The sign-up screen must support email, password, and SSO. It must be fully mobile responsive."
                  tags: ["signup", "auth", "mobile", "frontend"]
                  section_type: "prd"
        '404':
          description: Project not found
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /list_sections/{project_id}:
    get:
      operationId: list_sections
      summary: List all PRD and plan section titles, tags, and types for a project
      description: |
        Lists all PRD and plan section titles, tags, and types for a project. 
        Useful for GPT to avoid duplicates and audit the structure.
      tags: [export]
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of sections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SectionListItem'
              example:
                - section: "Features"
                  subsection: "Sign-Up Flow"
                  title: "Sign-Up Flow Requirements"
                  tags: ["signup", "auth", "mobile", "frontend"]
                  type: "prd"
                - section: "Features"
                  subsection: "Sign-Up Flow"
                  title: "Implement email + password input"
                  tags: ["frontend", "signup", "form", "validation"]
                  type: "plan"
        '404':
          description: Project not found
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /list_project_ids:
    get:
      operationId: list_project_ids
      summary: List all unique project IDs
      description: |
        Returns all unique project_ids present in prd_sections and plan_steps tables. 
        Useful for GPT to enumerate available projects.
      tags: [export]
      responses:
        '200':
          description: List of project IDs
          content:
            application/json:
              schema:
                type: object
                properties:
                  project_ids:
                    type: array
                    items:
                      type: string
              example:
                project_ids: ["123e4567-e89b-12d3-a456-426614174000", "456e4567-e89b-12d3-a456-426614174111"]
        '500':
          description: Internal server error
components:
  schemas:
    PRDSectionCreate:
      type: object
      properties:
        project_id:
          type: string
        section:
          type: string
        subsection:
          type: string
        title:
          type: string
        content:
          type: string
        tags:
          type: array
          items:
            type: string
        order_index:
          type: number
    PRDSectionUpdate:
      type: object
      properties:
        section_id:
          type: string
        title:
          type: string
        content:
          type: string
        tags:
          type: array
          items:
            type: string
        subsection:
          type: string
        order_index:
          type: number
    PRDSectionQuery:
      type: object
      properties:
        query:
          type: string
        project_id:
          type: string
        tags:
          type: array
          items:
            type: string
        top_k:
          type: integer
    PRDSectionMatch:
      type: object
      properties:
        id:
          type: string
        section:
          type: string
        subsection:
          type: string
        title:
          type: string
        content:
          type: string
        tags:
          type: array
          items:
            type: string
        order_index:
          type: number
        distance:
          type: number
    PRDSectionListItem:
      type: object
      properties:
        section:
          type: string
        subsection:
          type: string
        title:
          type: string
        content:
          type: string
        tags:
          type: array
          items:
            type: string
        section_type:
          type: string
    PlanStepCreate:
      type: object
      properties:
        project_id:
          type: string
        section:
          type: string
        subsection:
          type: string
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        order_index:
          type: number
    PlanStepUpdate:
      type: object
      properties:
        step_id:
          type: string
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        order_index:
          type: number
        subsection:
          type: string
    PlanStepBulkCreate:
      type: object
      properties:
        project_id:
          type: string
        section:
          type: string
        subsection:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/PlanStepCreate'
    PlanStepQuery:
      type: object
      properties:
        query:
          type: string
        project_id:
          type: string
        tags:
          type: array
          items:
            type: string
        top_k:
          type: integer
    PlanStepMatch:
      type: object
      properties:
        id:
          type: string
        section:
          type: string
        subsection:
          type: string
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        order_index:
          type: number
        distance:
          type: number
    PlanStepListItem:
      type: object
      properties:
        id:
          type: string
        section:
          type: string
        subsection:
          type: string
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        order_index:
          type: number
    CodebaseQuery:
      type: object
      properties:
        question:
          type: string
        project_id:
          type: string
        tags:
          type: array
          items:
            type: string
        top_k:
          type: integer
    CodeChunkMatch:
      type: object
      properties:
        id:
          type: string
        file_path:
          type: string
        line_start:
          type: integer
        line_end:
          type: integer
        content:
          type: string
        tags:
          type: array
          items:
            type: string
        distance:
          type: number
    DecisionLogCreate:
      type: object
      properties:
        project_id:
          type: string
        section:
          type: string
        subsection:
          type: string
        summary:
          type: string
        rationale:
          type: string
        change_type:
          type: string
        tags:
          type: array
          items:
            type: string
        linked_sections:
          type: array
          items:
            type: string
    TraceImpactInput:
      type: object
      properties:
        project_id:
          type: string
        decision_id:
          type: string
    SuggestUpdatesInput:
      type: object
      properties:
        section_ids:
          type: array
          items:
            type: string
    SectionListItem:
      type: object
      properties:
        section:
          type: string
        subsection:
          type: string
        title:
          type: string
        tags:
          type: array
          items:
            type: string
        type:
          type: string 
